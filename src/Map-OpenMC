
file: main.cpp{
    openmc_init(argc, argv, nullptr .or. &world)
        file: initialize.cpp{
            initialize_mpi(comm)
            read_input_xml()
                read_settings_xml()
                    file settings.cpp{

                    }
                read_cross_sections_xml()
                    file cross_sections.cpp{

                    }
                read_materials_xml()
                    file material.cpp{

                    }
                read_geometry_xml()
                    file geometry_aux.cpp{
                        
                    }
                read_CE_cross_sections_xml()
                    file cross_sections.cpp{
                        
                    }
                read_tallies_xml()
                    file tally.cpp{
                        
                    }
                prepare_distribcell()
                    file geometry_aux.cpp{
                        
                    }
        }
    openmc_run()
        file: simulation.cpp{
            openmc_simulation_init()
                calculate_work()
                allocate_banks()
                t->init_results()
                mat->init_nuclide_index()
                openmc_reset()
                initialize_source()
            openmc_next_batch(&status)
                initialize_batch()
                    increment current_batch
                    determine if first_active or first_inactive
                    if first_active: activate tallies
                    setup_active_tallies()
                // Loop over generations
                    initialize_generation()
                        clear fission bank
                    // Loop over work
                        initialize_history(&p, simulation::current_work)
                        p.transport()
                            file: particle.cpp{
                                simulation::total_weight += wgt_;
                                while (true) {
                                    store pre-collision properties
                                    reset event variables
                                    set birth attributes
                                    calculate cross sections 
                                    advance particle
                                    score tracklength tallies
                                    if particle cross surface {
                                        score surface tally
                                    } else collision {
                                        collision(this)
                                            file: physics.cpp{
                                                sample_neutron_reaction(p)
                                                    sample_nuclide(p)
                                                    sample_fission(p, nuclide)
                                                    create_fission_sites(p, i_nuclide, rx, fission_bank)
                                                    absorption(p, i_nuclide)
                                                    scatter(p, i_nuclide)
                                            }
                                        score collision tally
                                    }
                                    check for secondary particles
                                }
                            }
                    finalize_generation()
                finalize_batch()
            openmc_simulation_finalize()
        }
    openmc_finalize()
    MPI_Finalize()
}